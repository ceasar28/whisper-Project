{"version":3,"sources":["App.js","index.js"],"names":["getEthereumObject","window","ethereum","findMetaMaskAccount","a","console","error","log","request","method","accounts","length","account","App","useState","currentAccount","setCurrentAccount","allWaves","setAllWaves","contractABI","abi","getAllWaves","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","waves","wavesCleaned","forEach","wave","push","address","waver","timestamp","Date","message","connectWallet","alert","getTotalWaves","count","toNumber","waveTxn","hash","wait","useEffect","className","onClick","id","onSubmit","type","map","index","key","style","backgroundColor","marginTop","padding","border","borderRadius","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0f158318.chunk.js","sourcesContent":["import { Contract, ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport abi from \"./utils/wavePortal.json\";\n\nconst getEthereumObject = () => window.ethereum;\n\n/*\n * This function returns the first linked account found.\n * If there is no account linked, it will return null.\n */\nconst findMetaMaskAccount = async () => {\n  try {\n    const ethereum = getEthereumObject();\n\n    /*\n     * First make sure we have access to the Ethereum object.\n     */\n    if (!ethereum) {\n      console.error(\"Make sure you have Metamask!\");\n      return null;\n    }\n\n    console.log(\"We have the Ethereum object\", ethereum);\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      return account;\n    } else {\n      console.error(\"No authorized account found\");\n      return null;\n    }\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n};\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  // a state property to store waves\n  const [allWaves, setAllWaves] = useState([]);\n  // state property to store message\n  const [message, setMessage] = useState(\"\");\n  // a variable that holds the contract address\n  const contractAddress = \"0x759Dc4c2156144017195Dd723D5f6002C86c08Fb\";\n\n  // a variable that holds that reference the abi content\n  const contractABI = abi.abi;\n\n  // function to get the message from a user\n  const userMessage = async (e) => {\n    e.preventDefault();\n  };\n\n  // a method that gets all waves from our contract\n  const getAllWaves = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n\n        //calling the getAllWaves method from my Smart Contract\n        const waves = await wavePortalContract.getAllWaves();\n\n        // only address, timestamp and message is needed in my UI\n        let wavesCleaned = [];\n        waves.forEach((wave) => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message,\n          });\n        });\n\n        // store the date in a react state\n        setAllWaves(wavesCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const ethereum = getEthereumObject();\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n      getAllWaves(); // this calls the getallwaves method\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // function to interact with our smartContract\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n\n        // this is where the abi is been used.\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n\n        // executing the actual wave from my smart contract\n        const waveTxn = await wavePortalContract.wave(\"I love my laptop\");\n        console.log(\"Mining...\", waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log(\"Mined --\", waveTxn.hash);\n\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count ...\", count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn,t exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  /*\n   * This runs our function when the page loads.\n   * More technically, when the App component \"mounts\".\n   */\n  useEffect(async () => {\n    const account = await findMetaMaskAccount();\n    if (account !== null) {\n      setCurrentAccount(account);\n      getAllWaves();\n    }\n  }, []);\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">ðŸ‘‹ Hey there!</div>\n\n        <div className=\"bio\">\n          I am Ugochukwu and I worked on self-driving cars so that's pretty cool\n          right? Connect your Ethereum wallet and wave at me!\n        </div>\n\n        <button className=\"waveButton\" onClick={wave}>\n          Wave at Me\n        </button>\n\n        {/*\n         * If there is no currentAccount render this button\n         */}\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n        {currentAccount && (\n          <form id=\"message\" onSubmit={null}>\n            <textarea></textarea>\n            <button type=\"submit\" className=\"waveButton\">\n              Submit\n            </button>\n          </form>\n        )}\n        {\n          // conditional render to render the waves if the person is connected\n        }\n        {currentAccount &&\n          allWaves.map((wave, index) => {\n            return (\n              <div\n                key={index}\n                style={{\n                  backgroundColor: \"OldLace\",\n                  marginTop: \"16px\",\n                  padding: \"8px\",\n                  border: \"0\",\n                  borderRadius: \"5px\",\n                }}\n              >\n                <div>from: {wave.address}</div>\n                <div>\n                  <h4>{wave.message}</h4>\n                </div>\n                <div>Time: {wave.timestamp.toString()}</div>\n              </div>\n            );\n          })}\n        {/* {allWaves.map((wave, index) => {\n          return (\n            <div\n              key={index}\n              style={{\n                backgroundColor: \"OldLace\",\n                marginTop: \"16px\",\n                padding: \"8px\",\n              }}\n            >\n              <div>Address: {wave.address}</div>\n              <div>Time: {wave.timestamp.toString()}</div>\n              <div>Message: {wave.message}</div>\n            </div>\n          );\n        })} */}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}